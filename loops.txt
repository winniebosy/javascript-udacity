WHILE LOOPS
Parts of a While Loop
There are many different kinds of loops, but they all essentially do the same thing: they repeat an action some number of times.

Three main pieces of information that any loop should have are:

When to start: The code that sets up the loop — defining the starting value of a variable for instance.
When to stop: The logical condition to test whether the loop should continue.
How to get to the next item: The incrementing or decrementing step — for example, x = x * 3 or x = x - 1
Here's a basic while loop example that includes all three parts.



var start = 0; // when to start
while (start < 10) { // when to stop
  console.log(start);
  start = start + 2; // how to get to the next item
}
Prints:
0
2
4
6
8

If a loop is missing any of these three things, then you might find yourself in trouble. For instance, a missing stop condition can result in a loop that never ends!






"Fizzbuzz" is a famous interview question used in programming interviews. It goes something like this:

Loop through the numbers 1 to 100
If the number is divisible by 3, print "Fizz"
If the number is divisible by 5, print "Buzz"
If the number is divisible by both 3 and 5, print "FizzBuzz"
If the number is not divisible by 3 or 5, print the number


let num = 1;
while(num <=20){
    if(num % 3 === 0){
        console.log("fizz");
    }else if (num % 3=== 0 && num % 5===0){
        console.log("FizzBuzz");
    }else if (num % 5 === 0){
        console.log("Buzz");
    }else{
        console.log(num);
    }
    num= num + 1;
}




Directions:
Write a loop that prints out the following song. Starting at 99, and ending at 1 bottle.

Solution 
let songLine = 99;
while(songLine >= 0){
    console.log(`${songLine} bottles of juice on the wall! ${songLine} bottles of juice. Take one down...pass it around..`)
    songLine = songLine - 1;
}





Directions:
Write a while loop that counts down from 60 seconds and:

If there's a task being completed, it prints out the task
If there is no task being completed, it prints out the time as T-x seconds
Use the task and time descriptions described above.


let timeTakeoff = 60;
while(timeTakeoff >= 0){
    if (timeTakeoff == 50){
        console.log(`Orbiter transfers from ground to internal power(T-50 seconds)`)
    }else if(timeTakeoff == 31){
        console.log(`Ground launch sequencer is go for auto sequence start (T-31 seconds)`);
    }else if(timeTakeoff == 16) {
        console.log(`Activate launch pad sound suppression system(T-16 seconds)`);
    }else if(timeTakeoff == 10){
        console.log(`Activate main engine hydrogen burnoff sytem (T-10 seconds)`);
    }else if (timeTakeoff == 6) {
    console.log(`Activate main egine start(T-6 seconds)`);
    }else if(timeTakeoff == 0){
    console.log(`Solid rocket booster ignition and liftoff (T-0 seconds`);
    }else{
    console.log(`T-${timeTakeoff} seconds`);
    }
timeTakeoff = timeTakeoff - 1;
}





FOR LOOPS
The for loop explicitly forces you to define the start point, stop point, and each step of the loop. In fact, you'll get an Uncaught SyntaxError: Unexpected token ) if you leave out any of the three required pieces.

for ( start; stop; step ) {
  // do this thing
}
Here's an example of a for loop that prints out the values from 0 to 5. Notice the semicolons separating the different statements of the for loop: var i = 0; i < 6; i = i + 1

for (var i = 0; i < 6; i = i + 1) {
  console.log("Printing out i = " + i);
}
Prints:
Printing out i = 0
Printing out i = 1
Printing out i = 2
Printing out i = 3
Printing out i = 4
Printing out i = 5Did you know you can also nest loops inside of each other? Paste this nested loop in your browser and take a look at what it prints out:

for (var x = 0; x < 5; x = x + 1) {
  for (var y = 0; y < 3; y = y + 1) {
    console.log(x + "," + y);
  }
}
Prints:
0, 0
0, 1
0, 2
1, 0
1, 1
1, 2
2, 0
2, 1
2, 2
3, 0
3, 1
3, 2
4, 0
4, 1
4, 2


nested loops
Notice the order that the output is being displayed.

For each value of x in the outer loop, the inner for loop executes completely. The outer loop starts with x = 0, and then the inner loop completes its cycle with all values of y:

x = 0 and y = 0, 1, 2 // corresponds to (0, 0), (0, 1), and (0, 2)
Once the inner loop is done iterating over y, then the outer loop continues to the next value, x = 1, and the whole process begins again.

x = 0 and y = 0, 1, 2 // (0, 0) (0, 1) and (0, 2)
x = 1 and y = 0, 1, 2 // (1, 0) (1, 1) and (1, 2)
x = 2 and y = 0, 1, 2 // (2, 0) (2, 1) and (2, 2)
etc.


var x = 9;
while (x >= 1) {
  console.log("hello " + x);
  x = x - 1;
}


Directions:
Write a for (note: not a function) loop that prints out the factorial of the number 12:

A factorial is calculated by multiplying a number by all the numbers below it. For instance, 3! or "3 factorial" is 3 * 2 * 1 = 6

3! = 3 * 2 * 1 = 63!=3∗2∗1=6
4! = 4 * 3 * 2 * 1 = 244!=4∗3∗2∗1=24
5! = 5 * 4 * 3 * 2 * 1 = 1205!=5∗4∗3∗2∗1=120

Save your final answer in a variable called solution and print it to the console.

Your Code: solution
let solution = 1;
for(let a = 1; a<=12; a++){
     solution *=a;
     console.log(solution);
}
VM1179:4 1
VM1179:4 2
VM1179:4 6
VM1179:4 24
VM1179:4 120
VM1179:4 720
VM1179:4 5040
VM1179:4 40320
VM1179:4 362880
VM1179:4 3628800
VM1179:4 39916800
VM1179:4 479001600
undefined








for(x = 9; x >=1; x--){
    console.log(`Hello ${x}`);
}
VM4724:2 Hello 9
VM4724:2 Hello 8
VM4724:2 Hello 7
VM4724:2 Hello 6
VM4724:2 Hello 5
VM4724:2 Hello 4
VM4724:2 Hello 3
VM4724:2 Hello 2
VM4724:2 Hello 1






What is a "Scope"?
The scope is defined as a specific portion of the code. There are three types of scope in Javascript

Global scope - When a particular variable is visible (can be used) anywhere in the code. Such a variable is generally called as Global variable.
Function scope - When a particular variable is visible (can be used) within a particular function only. Such a variable is generally called as Local variable.
Block scope - When a particular variable is visible (can be used) within a pair of { . . . } only.
Let us see an example of each type of scope:

/*
 * Global scope. 
 * This variable declared outside of any function is called Global variable. 
 * Hence, you can use this anywhere in the code
 */
var opinion = "This nanodegree is amazing";

// Function scope
function showMessage() {
    // Local variable, visible within the function `showMessage`
    var message = "I am an Udacian!"; 

    // Block scope
    {
          let greet = "How are you doing?";
        /*
         * We have used the keyword `let` to declare a variable `greet` because variables declared with the `var` keyword can not have Block Scope. 
         */
    } // block scope ends

    console.log( message ); // OK
    console.log( greet ); // ERROR. 
    // Variable greet can NOT be used outside the block

    console.log( opinion ); // OK    to use the gobal variable anywhere in the code

} // function scope ends

Variable Declaration
There are three ways to declare a variable:

let - It a new way to declare a variable in any scope - Global, Local, or Block. The value of this variable can be changed or reassigned anytime within its scope.
const - It is also a way to declare constants in any scope - Global, Local, or Block. Once you are assigned a value to a const variable, the value of this variable CANNOT be changed or reassigned throughout the code.
var - This is the old way of declaring variables in only two scope - Global, or Local. Variables declared with the var keyword can not have Block Scope. The value of this variable can be changed or reassigned anytime within its scope.
